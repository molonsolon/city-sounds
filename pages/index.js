import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import React, { useEffect, useState } from "react";
import Place from "../components/Place";
import SearchIcon from "../public/searchGlass.svg";
const API_KEY = "u1Jom8qikw4A3dUo3uPxgm3fnRGb0tzy";
import {AnimatePresence, motion} from 'framer-motion'
 
export default function Home() {
  const [search, setSearch] = useState("");
  const [placeList, setPlaceList] = useState([]);
  const [page, setPage] = useState(0);


  // i  need to build a page function that will slide the places container
  // to the left, resulting in the first column sliding off screen to the left.
  // this will need to be triggered with buttons places on 
  // the bottom of each column for navigating forwards and backwards
  // through the pages. I will need to have a current page state in order to 
  // properly control these pages (next and previous only present when applicable)
  // 



  const getPlaces = async (search) => {
    try {
      const res = await fetch(
        `https://api.tomtom.com/search/2/geocode/${search}.json?key=${API_KEY}`
      );
      const geocode = await res.json();
      console.log(geocode.results[0]);
      const res2 = await fetch(
        `https://api.tomtom.com/search/2/categorySearch/"music".json?key=${API_KEY}&lat=${geocode.results[0].position.lat}&lon=${geocode.results[0].position.lon}&limit=50&categorySet=7318003,9361059,7318002`
      );
      const places = await res2.json();
      setPlaceList(places.results);
    } catch (e) {
      console.error(e);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log(search);
    console.log("User clicked submit");
    getPlaces(search);
  };

  
  return (
    <div className={styles.container}>
      <Head>
        <title>City Sounds</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="apple-touch-icon"
          sizes="180x180"
          href="/apple-touch-icon.png"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="32x32"
          href="/favicon-32x32.png"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="16x16"
          href="/favicon-16x16.png"
        />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#00ffbb" />
        <meta name="msapplication-TileColor" content="#da532c" />
        <meta name="theme-color" content="#5dfdcb" />
      </Head>
      <AnimatePresence>
        <main className={styles.main}>
          <h1 className={styles.title}>City Sounds</h1>

          <p className={styles.description}>
            Find and support your local music stores and venues
          </p>

          <form className={styles.searchForm} onSubmit={handleSubmit}>
            <label>
              <input
                type="text"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className={styles.searchBar}
              />
            </label>

            <button type="submit">
              <Image
                src={SearchIcon}
                alt="A rectangular magnifying glass that serves as a search button"
                height="30px"
              />
            </button>
          </form>
          <motion.ul 
          className={styles.places}
          animate={{x: `${page}vw`}}
          >
            {placeList &&
              placeList.map((place) => {
                return (
                  <Place
                    key={place.id}
                    place={place.poi.name}
                    address={place.address.freeformAddress}
                    website={place.poi.url}
                    id={place.id}
                  />
                );
              })}
          </motion.ul>
          <motion.div>
            {
              page < 0 &&
              <motion.button onClick={() => {
                setPage(page + 90)
                console.log(page)
              }}>Previous</motion.button>
            }
            {
              page > -270 &&
              <motion.button onClick={() => {
                setPage(page - 90)
                console.log(page)
              }}>Next</motion.button>
            }
          </motion.div>

          <footer className={styles.footer}></footer>
        </main>
        </AnimatePresence>
    </div>
  );
}
